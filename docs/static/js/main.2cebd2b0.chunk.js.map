{"version":3,"sources":["config/config.js","wheatherapp/api.js","customHooks/useLocalStorageState.js","wheatherapp/components/add-location/add-location.jsx","wheatherapp/components/add-location/index.jsx","wheatherapp/components/weather-pannel/weather-pannel.jsx","wheatherapp/components/weather-pannel/index.jsx","wheatherapp/weatherapp.jsx","wheatherapp/index.jsx","index.js"],"names":["config","API_KEY","UNITS","LANG","PXELS_API","searchTerm","searchType","fetch","then","res","json","query","createClient","photos","search","per_page","useLocalStorageState","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","AddLocation","props","onAdd","setValue","className","type","onChange","e","target","placeholder","disabled","onClick","WeatherPannel","name","weather","wind","main","currentWheater","src","icon","alt","description","charAt","toUpperCase","slice","temp","temp_min","temp_max","humidity","speed","WeatherApp","location","setLocation","background","setBackground","useEffect","length","api","photoIndex","Math","floor","random","large2x","catch","getWeatherBg","document","body","style","backgroundImage","newLocation","typeQuery","parseInt","wdata","alert","handleSearch","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2cebd2b0.chunk.js","sourcesContent":["const config = {\n    API_KEY: \"b6e15d83096f32133cad96b5a91e7033\",\n    UNITS: \"metric\",\n    LANG: \"es\",\n    PXELS_API: \"563492ad6f91700001000001f46b055b5bc94727beb73e75ca9ad1f4\"\n}\n\nexport default config","import config from \"../config/config\"\nimport {\n    createClient\n} from 'pexels';\n\nexport default {\n    fetchWeatherData: (searchTerm, searchType = \"q\") => {\n        return fetch(`//api.openweathermap.org/data/2.5/weather?${searchType}=${searchTerm}&appid=${config.API_KEY}&lang=${config.LANG}&units=${config.UNITS}`).then(res => res.json())\n    },\n\n    fetchPhotos: (searchTerm) => {\n        const client = createClient(config.PXELS_API);\n        const query = searchTerm;\n\n        return client.photos.search({\n            query,\n            per_page: 10\n        });\n    }\n}","import {\n    useState\n} from \"react\";\n\nconst useLocalStorageState = (key, initialValue) => {\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n        try {\n            // Get from local storage by key\n            const item = window.localStorage.getItem(key);\n            // Parse stored json or if none return initialValue\n            return item ? JSON.parse(item) : initialValue;\n        } catch (error) {\n            // If error also return initialValue\n            console.log(error);\n            return initialValue;\n        }\n    });\n\n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = value => {\n        try {\n            // Allow value to be a function so we have same API as useState\n            const valueToStore = value instanceof Function ? value(storedValue) : value;\n            // Save state\n            setStoredValue(valueToStore);\n            // Save to local storage\n            window.localStorage.setItem(key, JSON.stringify(valueToStore));\n\n        } catch (error) {\n            // A more advanced implementation would handle the error case\n            console.log(error);\n        }\n    };\n\n    return [storedValue, setValue];\n}\n\nexport default useLocalStorageState;","import React, { useState } from \"react\";\n\nimport \"./styles.css\";\n\nfunction AddLocation(props) {\n  const { onAdd } = props;\n\n  const [value, setValue] = useState(\"\");\n\n  const handleAdd = () => {\n    onAdd(value);\n    setValue(\"\");\n  };\n\n  return (\n    <div className=\"add-location\">\n      <input\n        type=\"text\"\n        onChange={(e) => setValue(e.target.value)}\n        value={value}\n        placeholder=\"Busca un lugar o un CP\"\n      />\n      <button disabled={value === \"\"} onClick={() => handleAdd()}>\n        Buscar\n      </button>\n    </div>\n  );\n}\n\nexport default AddLocation;\n","import AddLocation from \"./add-location\";\n\nexport default AddLocation;\n","import React from \"react\";\n\nfunction WeatherPannel({ name, weather, wind, main }) {\n  if (!weather) {\n    return null;\n  }\n\n  const currentWheater = weather[0];\n\n  return (\n    <div className=\"weather-pannel\">\n      <h1 className=\"city-name\">\n        <span>{name}</span>\n        <img\n          src={`http://openweathermap.org/img/wn/${currentWheater.icon}.png`}\n          alt={currentWheater.description}\n        />\n      </h1>\n      <hr />\n      <div className=\"info-row description\">{`${currentWheater.description\n        .charAt(0)\n        .toUpperCase()}${currentWheater.description.slice(1)}`}</div>\n      <div className=\"info-row temeperature\">\n        Temperatura (act/min/max): {main.temp}ºC / {main.temp_min}ºC /{\" \"}\n        {main.temp_max}ºC\n      </div>\n      <div className=\"info-row humidity\">Humedad: {main.humidity}</div>\n      <div className=\"info-row wind\">\n        Velocidad del viento: {wind.speed} m/s\n      </div>\n    </div>\n  );\n}\n\nexport default WeatherPannel;\n","import WeatherPannel from \"./weather-pannel\";\n\nexport default WeatherPannel;\n","import React, { useState, useEffect } from \"react\";\nimport api from \"./api\";\nimport useLocalStorageState from \"../customHooks/useLocalStorageState\";\n\nimport AddLocation from \"./components/add-location\";\nimport WeaterPannel from \"./components/weather-pannel/\";\n\nimport \"./styles.css\";\n\nfunction WeatherApp(props) {\n  const [location, setLocation] = useLocalStorageState(\"location\", \"\");\n  const [background, setBackground] = useState(\"\");\n\n  const handleSearch = (searchTerm) => {\n    const typeQuery = parseInt(searchTerm) + \"\" === searchTerm ? \"zip\" : \"q\";\n    api\n      .fetchWeatherData(searchTerm, typeQuery)\n      .then((wdata) => setLocation(wdata))\n      .catch((e) => alert(e));\n  };\n\n  const getWeatherBg = (query = \"blue sky\") => {\n    api\n      .fetchPhotos(query)\n      .then((res) => {\n        const photoIndex = Math.floor(Math.random() * res.photos.length);\n        const src = res.photos[photoIndex].src.large2x;\n        setBackground(src);\n      })\n      .catch(() => console.log(\"error\"));\n  };\n\n  useEffect(() => {\n    if (location && location.weather && location.weather.length > 0) {\n      getWeatherBg(location.weather[0].main);\n    }\n  }, [location]);\n\n  useEffect(() => {\n    document.body.style.backgroundImage = `url(${background})`;\n  }, [background]);\n\n  return (\n    <div>\n      <AddLocation onAdd={(newLocation) => handleSearch(newLocation)} />\n      <WeaterPannel {...location} />\n    </div>\n  );\n}\n\nexport default WeatherApp;\n","import WeatherApp from \"./weatherapp\";\n\nexport default WeatherApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\n\nimport WeatherApp from \"./wheatherapp/\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <WeatherApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}