{"version":3,"sources":["config/config.js","wheatherapp/api.js","customHooks/useLocalStorageState.js","wheatherapp/components/add-location/add-location.jsx","wheatherapp/components/add-location/index.jsx","wheatherapp/components/weather-pannel/weather-pannel.jsx","wheatherapp/components/weather-pannel/index.jsx","wheatherapp/components/loading/loading.jsx","wheatherapp/components/loading/index.jsx","wheatherapp/weatherapp.jsx","wheatherapp/index.jsx","index.js"],"names":["config","API_KEY","UNITS","LANG","PXELS_API","searchTerm","searchType","fetch","then","res","json","query","createClient","photos","search","per_page","useLocalStorageState","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","AddLocation","props","onAdd","setValue","handleAdd","className","type","onChange","e","target","onKeyDown","event","placeholder","disabled","onClick","WeatherPannel","name","weather","wind","main","onRemove","selected","currentWheater","src","icon","alt","description","charAt","toUpperCase","slice","temp","temp_min","temp_max","humidity","speed","Loading","visible","WeatherApp","locations","setLocations","length","selLocIndex","setSelLocIndex","background","setBackground","loading","setLoading","getWeatherBg","api","photoIndex","Math","floor","random","large2x","catch","useEffect","document","body","style","backgroundImage","newLocation","typeQuery","parseInt","wdata","cod","some","l","id","alert","message","newLocations","finally","handleSearch","map","location","index","filter","handleRemove","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.88301d00.chunk.js","sourcesContent":["const config = {\n    API_KEY: \"b6e15d83096f32133cad96b5a91e7033\",\n    UNITS: \"metric\",\n    LANG: \"es\",\n    PXELS_API: \"563492ad6f91700001000001f46b055b5bc94727beb73e75ca9ad1f4\"\n}\n\nexport default config","import config from \"../config/config\"\nimport {\n    createClient\n} from 'pexels';\n\nexport default {\n    fetchWeatherData: (searchTerm, searchType = \"q\") => {\n        return fetch(`//api.openweathermap.org/data/2.5/weather?${searchType}=${searchTerm}&appid=${config.API_KEY}&lang=${config.LANG}&units=${config.UNITS}`).then(res => res.json())\n    },\n\n    fetchPhotos: (searchTerm) => {\n        const client = createClient(config.PXELS_API);\n        const query = searchTerm;\n\n        return client.photos.search({\n            query,\n            per_page: 10\n        });\n    }\n}","import {\n    useState\n} from \"react\";\n\nconst useLocalStorageState = (key, initialValue) => {\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n        try {\n            // Get from local storage by key\n            const item = window.localStorage.getItem(key);\n            // Parse stored json or if none return initialValue\n            return item ? JSON.parse(item) : initialValue;\n        } catch (error) {\n            // If error also return initialValue\n            console.log(error);\n            return initialValue;\n        }\n    });\n\n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = value => {\n        try {\n            // Allow value to be a function so we have same API as useState\n            const valueToStore = value instanceof Function ? value(storedValue) : value;\n            // Save state\n            setStoredValue(valueToStore);\n            // Save to local storage\n            window.localStorage.setItem(key, JSON.stringify(valueToStore));\n\n        } catch (error) {\n            // A more advanced implementation would handle the error case\n            console.log(error);\n        }\n    };\n\n    return [storedValue, setValue];\n}\n\nexport default useLocalStorageState;","import React, { useState } from \"react\";\n\nimport \"./styles.css\";\n\nfunction AddLocation(props) {\n  const { onAdd } = props;\n\n  const [value, setValue] = useState(\"\");\n\n  const handleAdd = () => {\n    onAdd(value);\n    setValue(\"\");\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.key === 'Enter') {\n      handleAdd()\n    }\n  }\n\n  return (\n    <div className=\"add-location\">\n      <input\n        type=\"text\"\n        onChange={(e) => setValue(e.target.value)}\n        onKeyDown={handleKeyDown} \n        value={value}\n        placeholder=\"Busca un lugar o un CP\"\n      />\n      <button disabled={value === \"\"} onClick={() => handleAdd()}>\n        Buscar\n      </button>\n    </div>\n  );\n}\n\nexport default AddLocation;\n","import AddLocation from \"./add-location\";\n\nexport default AddLocation;\n","import React from \"react\";\n\nfunction WeatherPannel({ name, weather, wind, main, onRemove, onClick, selected}) {\n  if (!weather) {\n    return null;\n  }\n\n  const currentWheater = weather[0];\n\n  return (\n    <div className={`weather-pannel ${selected ? \"seledted\" : \"\"}`}onClick={() => onClick()}>\n      <span className=\"remove-icon\" onClick={() => onRemove()}>X</span>\n      <h1 className=\"city-name\">\n        <span>{name}</span>\n        <img\n          src={`http://openweathermap.org/img/wn/${currentWheater.icon}.png`}\n          alt={currentWheater.description}\n        />\n      </h1>\n      <hr />\n      <div className=\"info-row description\">{`${currentWheater.description\n        .charAt(0)\n        .toUpperCase()}${currentWheater.description.slice(1)}`}</div>\n      <div className=\"info-row temeperature\">\n        Temperatura (act/min/max): {main.temp}ºC / {main.temp_min}ºC /{\" \"}\n        {main.temp_max}ºC\n      </div>\n      <div className=\"info-row humidity\">Humedad: {main.humidity}</div>\n      <div className=\"info-row wind\">\n        Velocidad del viento: {wind.speed} m/s\n      </div>\n    </div>\n  );\n}\n\nexport default WeatherPannel;\n","import WeatherPannel from \"./weather-pannel\";\n\nexport default WeatherPannel;\n","import React from 'react'\n\nimport \"./styles.css\";\n\nfunction Loading({visible}) {\n    if(visible){\n        return (\n            <div className=\"loading-container\">\n                <div>\n                cargando...\n                </div>\n            </div>\n        )\n    }\n    return null;\n}\n\nexport default Loading\n","import Loading from \"./loading\";\n\nexport default Loading","import React, { useState, useEffect } from \"react\";\nimport api from \"./api\";\nimport useLocalStorageState from \"../customHooks/useLocalStorageState\";\n\nimport AddLocation from \"./components/add-location\";\nimport WeaterPannel from \"./components/weather-pannel/\";\nimport Loading from \"./components/loading/\"\n\nimport \"./styles.css\";\n\nfunction WeatherApp(props) {\n  const [locations, setLocations] = useLocalStorageState(\"location\", []);\n  const [selLocIndex, setSelLocIndex] = useLocalStorageState(\"selectedLocationIndex\", locations.length  > 0 ? 0 : -1);\n  const [background, setBackground] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const handleSearch = (searchTerm) => {\n    const typeQuery = parseInt(searchTerm) + \"\" === searchTerm ? \"zip\" : \"q\";\n    setLoading(true);\n    api\n      .fetchWeatherData(searchTerm, typeQuery)\n      .then((wdata) => {\n        if(wdata.cod === 200 && !locations.some(l => l.id === wdata.id)){\n          const newLocations = [...locations, wdata];\n          setLocations(newLocations)\n          setSelLocIndex(newLocations.length - 1);          \n        }else{\n          alert(wdata.message);\n        }\n      })\n      .catch((e) => alert(e))\n      .finally(() => setLoading(false));\n  };\n\n  const getWeatherBg = (query = \"sunny sky blue\") => {\n    api\n      .fetchPhotos(query)\n      .then((res) => {\n        const photoIndex = Math.floor(Math.random() * res.photos.length);\n        const src = res.photos[photoIndex].src.large2x;\n        setBackground(src);        \n      })\n      .catch(() => console.log(\"error\"));\n  };\n\n  useEffect(() => {\n    if (locations && locations.length > 0 && locations[selLocIndex] && locations[selLocIndex].weather && locations[selLocIndex].weather.length > 0) {\n      getWeatherBg(locations[selLocIndex].weather[0].main);\n    }else{\n      getWeatherBg();\n    }\n  }, [locations, selLocIndex]);\n\n  useEffect(() => {\n    document.body.style.backgroundImage = `url(${background})`;\n  }, [background]);\n\n  const handleRemove = (id) => {\n    const newLocations = locations.filter(location => location.id !== id)\n    setLocations(newLocations)\n    setSelLocIndex(newLocations.length - 1);\n  }\n\n  return (\n    <div>\n      <AddLocation onAdd={(newLocation) => handleSearch(newLocation)} />\n      <div className=\"locations-list\">\n      {locations && locations.map((location, index) => (\n        <WeaterPannel \n          key={location.key} \n          {...location} \n          onRemove={() => handleRemove(location.id)} \n          onClick={() => setSelLocIndex(index)} \n          selected={selLocIndex === index}\n        />\n      ))} \n      </div>\n      <Loading visible={loading} />\n    </div>\n  );\n}\n\nexport default WeatherApp;\n","import WeatherApp from \"./weatherapp\";\n\nexport default WeatherApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\n\nimport WeatherApp from \"./wheatherapp/\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <WeatherApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}